#!/usr/bin/env bash

[ "$BAZ_DEBUG" ] && set -x

export BAZ_VERSION='6.2.0'
export BAZ_DIR="$HOME/.local/share/baz"
export BAZ_CONFDIR="$HOME/.config/baz"
export BAZ_CONF="$BAZ_CONFDIR/config.env"
export BAZ_PRE="$BAZ_CONFDIR/preload.env"
export BAZ_LOADER="$BAZ_DIR/loader.sh"
export BAZ_PLUGDIR="$BAZ_DIR/plugins"
export CC="${CC:-cc}"

export BAZP_ENV=(
    BAZP_NAME BAZP_LICENSE
    BAZP_VER BAZP_AUTHOR BAZP_SRC
    BAZP_METHOD BAZP_SOURCE
    BAZP_DESCRIPTION
)
export BAZP_INDEX='baz.env'

BAZP_INITDIR="$("${PWDCMD:-pwd}")"
export BAZP_INITDIR

export TMPDIR="${TMPDIR:-/tmp}"

export BAZ_BASH_LOADER_TEMPLATE="$BAZP_INITDIR/loader.sht"
export BAZ_LOADER_DIR="$BAZP_INITDIR/loader"
export BAZ_LOADER_TEMPLATE="$BAZ_LOADER_DIR/loader.sht"
export BAZ_LOADER_PROG="$BAZ_LOADER_DIR/loader.c"
export BAZ_LOADER_PROG_BIN="$BAZ_DIR/load"

export BAZ_LOGGING_HEADER='[BAZ_LOAD]'

export BAZ_CACHE_DIR="$HOME/.cache/baz"

# helpers

entry() { printf " + %-40s%s\n" "$1" "$2"; }
log() { [ "$BAZP_NO_LOG" = true ] || ${2:-echo} " * $1"; }
elog() { log "$1" >&2; }
eecho() { [ "$BAZP_NO_LOG" = true ] || echo "$1" >&2; }
unexpand_path() { echo "${1/"$HOME"/"${2:-~}"}"; }
baz_git_clone() { git clone --quiet --recursive -- "$1" "$2"; }

get_base() {
    set -- "${1%"${1##*[!/]}"}"
    echo "${1##*/}"
}

baz_sanitize() {
    read -r x
    local tmp="${x//[[:space:]\"\'~!#\\$%^&*\/()=]/}"
    echo "${tmp//../}"
}

baz_hook() {
    local hook="${BAZP_SRC:?}/hooks/$1"

    if [ -f "$hook" ]; then
        BAZP_NO_LOG=false log "$2: $1"
        "$3" "$hook"
    fi
}

baz_run_hook() {
    if [ -z "$1" ] || [ ! -d "${BAZP_SRC:?}/hooks" ]; then
        return
    fi

    baz_hook "$1-pre" 'sourcing pre-hook' source
    baz_hook "$1" 'running hook' bash
    baz_hook "$1-source" 'sourcing hook' source
    baz_hook "$1-post" 'sourcing post-hook' source

    return 0
}

in_array() {
    for element in $1; do
        if [[ $2 =~ $element ]]; then
            log "'$2' matches element : $element"
            return 0
        fi
    done

    return 1
}

indent() {
    while IFS=$'\n' read -r line; do
        echo "  $line"
    done
}

use() {
    for dep in "$@"; do
        if ! command -v -- "$dep" >/dev/null; then
            case "${do_error:-}" in
            no) return 1 ;;
            *) error "required dependency not installed : $dep" ;;
            esac
        fi
    done
}

error() {
    elog "error : $1"
    exit 1
}

yn() {
    printf ' [y / N] %s\n >> ' "$1"
    read -r ans
    [ "$ans" = 'y' ]
}

check_plugin_state() {
    plugin="$(echo "$plugin" | baz_sanitize)"

    if [ ! "$plugin" ]; then
        [ "$1" ] && : >"$1"
        error 'no plugins supplied'
    fi

    if [ ! -d "${BAZ_PLUGDIR:?}/$plugin" ]; then
        [ "$1" ] && : >"$1"
        error "plugin '$plugin' not installed"
    fi
}

baz_update_plugin_git() {
    . "$BAZP_INDEX"

    BAZP_NO_LOG=true

    bazp_check_env
    old_ver="$BAZP_VER"

    git reset --quiet --hard
    git remote update --prune >/dev/null 2>&1

    if git status -uno | grep -iq behind; then
        git checkout FETCH_HEAD "$BAZP_INDEX" --quiet

        bazp_reset_env
        . "$BAZP_INDEX"
        bazp_check_env
        new_ver="$BAZP_VER"

        bazp_reset_env
        git checkout HEAD "$BAZP_INDEX" --quiet
        . "$BAZP_INDEX"

        BAZP_NO_LOG=false

        if [ "$new_ver" != "$old_ver" ]; then
            log "updating '$1' from v$old_ver -> v$new_ver"

            baz_run_hook 'pre-update'
            git merge -X theirs origin --quiet --all
            baz_run_hook 'post-update'
        fi
    fi

    bazp_reset_env
}

baz_update_plugin_local() {
    origin="$(head -n 1 origin)"
    local_bazp="$origin/$BAZP_INDEX"

    [ -d "$origin" ] || error "origin $origin does not exist for plugin '$1'"
    [ -f "$local_bazp" ] || error "no $BAZP_INDEX in $origin for plugin '$1'"

    BAZP_NO_LOG=true

    . "$BAZP_INDEX"
    bazp_check_env
    old_ver="$BAZP_VER"

    if [ -n "$(diff -rq --color=never -x .git -x disabled -x method -x origin "$origin" . 2>&1 || :)" ]; then
        bazp_reset_env
        . "$local_bazp"
        bazp_check_env
        new_ver="$BAZP_VER"

        BAZP_NO_LOG=false

        if [ "$new_ver" != "$old_ver" ]; then
            log "updating '$1' from v$old_ver -> v$new_ver"

            baz_run_hook 'pre-update'

            # i am in pain how stupid this expression is
            # btw cant use -exec or find breaks

            while read -r file; do
                rm -rf -- "$file"
            done <<<"$(find . -not -path . -and -not -path ./origin -and -not -path ./method -and -not -path ./disabled)"

            cp -r -- "$origin"/* .

            baz_run_hook 'post-update'
        fi
    fi

    bazp_reset_env
}

baz_update_plugin() {
    bplug="$(get_base "$1")"
    cd -- "$1"

    method="$(head -n 1 method)"

    fn="baz_update_plugin_$method"
    command -v -- "$fn" >/dev/null ||
        error "unknown method to update '$bplug' : $method"

    "$fn" "$bplug"

    cd -- "$BAZP_INITDIR"
}

describe_env() {
    log '----------------'
    log "description : $BAZP_DESCRIPTION"
    log '----------------'
    log "name : $BAZP_NAME"
    log "license : $BAZP_LICENSE"
    log "version : v$BAZP_VER"
    log "author : $BAZP_AUTHOR"
    log "root_plugin_directory : $BAZP_SRC"
    log "recomended_install_method : $BAZP_METHOD"
    log "source : $BAZP_SOURCE"
    [ -f 'method' ] && log "installed_with_method : $(head -n 1 method)"
    [ -f 'origin' ] && log "plugin_origin : $(head -n 1 origin)"
    log "disabled : $( ([ -f 'disabled' ] && echo 'Yes') || echo 'No')"

    BAZP_NO_LOG=true bazp_reset_env
    return 0
}

describe_local() {
    [ -d "$1" ] || error "plugin directory '$1' does not exist"

    cd -- "$1"
    . "$BAZP_INDEX"
    describe_env
    cd -- "$BAZP_INITDIR"
}

describe_git() {
    _repo_dir="${TMPDIR:?}/$(get_base "$1")"
    trap 'rm -rf -- "$_repo_dir"' 0 1 15

    log "cloning $1 ... " printf
    baz_git_clone "$1" "$_repo_dir"
    eecho 'done'
    eecho

    cd -- "$_repo_dir"
    . "$BAZP_INDEX"
    describe_env
    cd -- "$BAZP_INITDIR"
}

describe_exist() {
    _plugdir="${BAZ_PLUGDIR:?}/$1"

    [ -d "${BAZ_PLUGDIR:?}" ] || error 'plugin directory does not exist'
    [ -d "${_plugdir:?}" ] || error "plugin '$1' not installed"

    cd -- "$_plugdir"

    [ -f "${BAZP_INDEX:?}" ] || error "'$BAZP_INDEX' does not exist"
    . "$BAZP_INDEX"

    describe_env
    cd -- "$BAZP_INITDIR"
}

# generators

baz_config() {
    cat <<EOF
#!/usr/bin/env bash
# default baz configuration ( generated by baz v$BAZ_VERSION )

# BAZP_NO_ASKCHECK : ask wether to check and / or edit $BAZP_INDEX
# false : ask
# true : dont ask
export BAZP_NO_ASKCHECK=false

# BAZP_NO_ASKINST : ask whether to ( un )install a plugin
# false : ask
# true : dont ask
export BAZP_NO_ASKINST=false

# you can blacklist any variable of $BAZP_INDEX by
# prepending BLACKLIST_ to it, for example :

export BLACKLIST_BAZP_NAME=(.*-unstable$ .*-dangerous$)

# will blacklist all plugins that end with either -unstable or -dangerous
# at the end of their name, blocking the property \$BAZP_NAME

# ex: ft=sh
EOF
}

baz_preload() {
    cat <<EOF
#!/usr/bin/env bash
# default baz preload configuration ( generated by baz v$BAZ_VERSION )

# BAZP_NO_LOG : disable most logging
# false : log
# true : dont log
export BAZP_NO_LOG=false

# BAZ_NORLWRAP : disable the use of rlwrap
# ( wont use rlwrap even if available )
# false : use
# true : dont use
export BAZ_NORLWRAP=false

# ex: ft=sh
EOF
}

baz_loader_q() { echo "s|#{$1}|$2|g"; }

baz_loader_logging_fn() {
    if [ "$BAZ_LOGGING_ENABLED" ]; then
        tr -d '\n' <<EOF
if [ "\$BAZ_DEBUG_LOAD" ]; then
 _baz_vecho() { echo "[BAZ_LOAD] \$1">\\&2;}\\&\\&
 _baz_vecho "generated by baz version '\$BAZ_LOADER_VERSION'";
else
 _baz_vecho() { :;};
fi
EOF
    fi
}

baz_loader_baz_log() {
    if [ "$BAZ_LOGGING_ENABLED" ]; then
        echo '_baz_vecho'
    else
        echo '#'
    fi
}

baz_loader_delim() {
    use sed head awk printf

    local shasum

    shasum=sha1
    if ! do_error=no use "$shasum"; then
        shasum="${shasum}sum"
        use "$shasum" || error 'sha1 / sha1sum dependency error : unable to locate a valid sha1 hashing tool'
    fi

    printf '%s' "_____UNSAFE_$RANDOM$(head -n 10 /dev/urandom | "$shasum" | awk '{print substr($1, 0, 19)}')$((RANDOM * 2))_DONT.USE.ME_____"
}

baz_loader() {
    use sed head awk printf grep read echo

    local idx=0 loader

    loader="$(sed \
        -e "$(baz_loader_q 'BAZ_DATA_DIR' "$BAZ_DIR")" \
        -e "$(baz_loader_q 'BAZ_PLUG_DIR' "$BAZ_PLUGDIR")" \
        -e "$(baz_loader_q 'BAZ_RDELIM' "$(baz_loader_delim)")" \
        -e "$(baz_loader_q 'BAZ_VER' "$BAZ_VERSION")" \
        -e "$(baz_loader_q 'BAZ_LOGGING_FN' "$(baz_loader_logging_fn)")" \
        -e "$(baz_loader_q 'BAZ_LOG' "$(baz_loader_baz_log)")" \
        -e "$(baz_loader_q 'BAZ_NOP' "$([ "$BAZ_ENSURE_OK" ] && echo ':')")" \
        -e "$(baz_loader_q 'BAZ_RD' "read -rd ''")" \
        -e "s|:BAZ_LOADER_CMD|$BAZ_LOADER_PROG_BIN|g" \
        -e '/^[[:blank:]]*#/d; /^[[:blank:]]*$/d; s/^[[:blank:]]*//g; s/_baz_vecho/._l/g' \
        -e 's/ </</g; s/ >/>/g; s/ \&\& /\&\&/g; s/ || /||/g; s/; /;/g' \
        "$1")"

    loader="$(printf '%s' "$loader" | sed -e "$(echo "$loader" | grep '^_.*\(\) {$' |
        awk '{print $1}' |
        while read -r func_name; do
            echo "s/${func_name::-2}/.$idx/g;"
            idx="$((idx + 1))"
        done)" -e 's/() {/(){/g')"

    loader="${loader//+([[:blank:]])/ }"
    loader="${loader# }"
    loader="${loader% }"

    printf '%s' "$loader"
}

# installer helpers

bazp_check_env() {
    log "Checking $BAZP_INDEX... " printf

    for env in "${BAZP_ENV[@]}"; do
        if [ ! "${!env}" ]; then
            eecho 'error'
            error "bazp : '$env' ( a required propery ) is not set in $BAZP_INDEX"
        fi
    done

    eecho 'done'
}

bazp_reset_env() {
    log 'resetting environment ... ' printf

    for env in "${BAZP_ENV[@]}"; do
        unset "$env"
    done

    eecho 'done'
}

bazp_install_dir() {
    [ -d "$1" ] || error "'$1' is not a directory"
    cd -- "$1"

    [ -f "$BAZP_INDEX" ] || error "$BAZP_INDEX does not exist"

    if [ "$BAZP_NO_ASKCHECK" != 'true' ]; then
        yn "do you want to check out $BAZP_INDEX ?" && less -- "$BAZP_INDEX"
        yn "do you want to edit $BAZP_INDEX ?" && ${EDITOR:-vi} "$BAZP_INDEX"
    fi

    bazp_reset_env
    . "$BAZP_INDEX"
    BAZP_NAME="$(echo "$BAZP_NAME" | baz_sanitize)"
    bazp_check_env

    for listing in "${BAZP_ENV[@]}"; do
        _blacklist="BLACKLIST_${listing}"

        [ "${!_blacklist}" ] || continue

        in_array "${!_blacklist}" "${!listing}" &&
            error "$listing '${!listing}' is blacklisted by $_blacklist"
    done

    [ -d "${BAZ_PLUGDIR:?}" ] || mkdir -p -- "${BAZ_PLUGDIR:?}"
    [ -d "${BAZ_PLUGDIR:?}/${BAZP_NAME:?}" ] && error "plugin '$BAZP_NAME' already is installed"

    baz_run_hook 'pre-install'

    log "installing plugin : ${BAZP_NAME:?} ... " printf

    cp -r . "${BAZ_PLUGDIR:?}/${BAZP_NAME:?}"

    if [ ! "$_bazp_no_write" ]; then
        echo 'local' >"${BAZ_PLUGDIR:?}/${BAZP_NAME:?}/method"
        pwd >"${BAZ_PLUGDIR:?}/${BAZP_NAME:?}/origin"
    fi

    eecho 'done'

    baz_run_hook 'post-install'

    cd -- "$BAZP_INITDIR"
    [ "$_bazp_no_clearenv" ] || bazp_reset_env
}

bazp_install_git() {
    use git local

    _plugdir="${TMPDIR:?}/$(get_base "$1")"

    if [ -e "$_plugdir" ]; then
        log "removing $1 ... " printf
        rm -Ir -- "$_plugdir" || error 'canceled'
        eecho 'done'
    fi

    log "cloning repository : $1 ... " printf
    baz_git_clone "$1" "$_plugdir"
    eecho 'done'

    log "installing $_plugdir"
    _bazp_no_clearenv=true _bazp_no_write=true bazp_install_dir "$_plugdir"

    echo 'git' >"${BAZ_PLUGDIR:?}/${BAZP_NAME:?}/method"
    bazp_reset_env
    rm -rf -- "$_plugdir"
}

bazp_install_dirs() {
    for dir in "$@"; do
        log "installing : $dir"
        bazp_install_dir "$dir"
    done
}

bazp_install_gits() {
    for repo in "$@"; do
        log "installing : $repo"
        bazp_install_git "$repo"
    done
}

# functionality

baz_help() {
    [ "$BAZP_NO_LOG" = true ] && return

    elog "help for baz v$BAZ_VERSION"

    {
        log 'subcommands :'

        {
            entry 'help' 'print help'

            entry 'setup' 'setup baz plugin manager'
            log "make sure you have $(get_base "$BAZ_LOADER_TEMPLATE") file in CWD" | indent

            entry 'unsetup' 'unsetup ( remove ) the baz plugin manager'

            entry 'install [method] [atoms...]' 'install plugins'
            {
                entry 'local' 'local plugin from a directory'
                log 'atom type : path to plugin, e.g. /tmp/myplug' | indent

                entry 'git' 'git plugin from git'
                log 'atom type : <repo url>, e.g. https://ari-web.xyz/gh/baz-example-plugin' | indent
            } | indent

            entry 'uninstall [plugins...]' 'uninstall plugins'
            entry 'list' 'list all installed plugins'
            entry 'update <plugins...>' 'update all installed or specified plugins'

            entry 'info [exist|local|git] [atoms...]' 'describe ( get info ) about plugins'
            {
                entry 'exist' 'describe existing ( installed ) plugin'
                log 'atom type : plugin name, e.g. myplug' | indent

                entry 'local' 'describe local plugin'
                log 'atom type : path to plugin, e.g. /tmp/myplug' | indent

                entry 'git' 'describe plugin from a git source'
                log 'atom type : <repo url>, e.g. https://ari-web.xyz/gh/baz-example-plugin' | indent
            } | indent

            entry 'upgrade' 'upgrade baz'
            log "make sure you're in the baz git repo directory" | indent

            entry 'version' 'print version and exit'

            entry 'disable [plugins...]' 'disable plugins'
            entry 'enable [plugins...]' 'enable plugins'
        } | indent

        echo

        log 'user loader functions :'

        {
            log 'can return anything'

            entry 'baz_load_plugin_low <plug dir>' 'load a baz plugin from a specified directory'

            {
                log 'note : this is quite a low-level function'
                log 'example : a trailing slash at the end of <plug dir>' | indent
            } | indent

            entry 'baz_loader' 'load all enabled installed plugins'
            {
                log 'note : will leave environment variables of last plugin that was loaded'
                log 'all environment variables from baz.env' | indent
            } | indent
        } | indent
    } | indent >&2
}

baz_setup() {
    use awk

    if [ "$_baz_upgrade" ]; then
        _baz_new_ver=$(BAZ_NORLWRAP=true ./baz version)

        if [ "$_baz_new_ver" = "v$BAZ_VERSION" ]; then
            log "version v$BAZ_VERSION is up to date with $_baz_new_ver"
            return
        fi

        log "upgrading baz v$BAZ_VERSION"

        log "updating repo ... " printf
        git reset --quiet --hard 2>/dev/null || error 'failed to reset the repo'
        git pull --quiet 2>/dev/null || error 'failed to pull from repo'
        eecho 'done'
    else
        log "setting up baz v$BAZ_VERSION"
    fi

    if [ ! -d "$BAZ_DIR" ]; then
        log "making baz data directory : $(unexpand_path "$BAZ_DIR")... " printf
        mkdir -p -- "$BAZ_DIR"
        eecho 'done'
    fi

    if [ ! -d "$BAZ_CONFDIR" ]; then
        log "making baz config directory : $(unexpand_path "$BAZ_CONFDIR") ... " printf
        mkdir -p -- "$BAZ_CONFDIR"
        eecho 'done'
    fi

    log "generating baz config : $(unexpand_path "$BAZ_CONF") ... " printf
    if [ ! -f "$BAZ_CONF" ] || [ "$BAZ_NEWCONF" ]; then
        baz_config >"$BAZ_CONF"
        eecho 'done'
    else
        eecho 'found'
    fi

    log "generating baz preload : $(unexpand_path "$BAZ_PRE") ... " printf
    if [ ! -f "$BAZ_PRE" ] || [ "$BAZ_NEWCONF" ]; then
        baz_preload >"$BAZ_PRE"
        eecho 'done'
    else
        eecho 'found'
    fi

    if [ ! "$BAZ_NO_CC" ] && do_error=no use "$CC" && [ -f "$BAZ_LOADER_PROG" ]; then
        if [ -f "$BAZ_LOADER_TEMPLATE" ]; then
            log "generating wrapper to $(unexpand_path "$BAZ_LOADER") ... " printf
            baz_loader "$BAZ_LOADER_TEMPLATE" >"$BAZ_LOADER"
            eecho 'done'
        else
            log "no wrapper template ( $(unexpand_path "$BAZ_LOADER_TEMPLATE") ) found in CWD"
        fi

        log "compiling loader $(unexpand_path "$BAZ_LOADER_PROG_BIN") ... " printf

        # shellcheck disable=SC2086
        if "$CC" $CFLAGS "$BAZ_LOADER_PROG" -D BAZ_CACHE_DIR="\"$BAZ_CACHE_DIR\"" -D DELIM="\"$(baz_loader_delim)\"" $([ "$BAZ_LOGGING_ENABLED" ] && echo "-D LOGGING=\"\\\"$BAZ_LOGGING_HEADER\\\"\"") -o "$BAZ_LOADER_PROG_BIN"; then

            if [ "$STRIP" ] && do_error=no use "$STRIP"; then
                # shellcheck disable=SC2086
                "$STRIP" $STRIPFLAGS "$BAZ_LOADER_PROG_BIN"
            fi

            eecho 'done'
        else
            eecho 'complilation failed'
        fi
    elif [ -f "$BAZ_LOADER_TEMPLATE" ]; then
        log "cannot use the c loader, using bash loader"

        log "generating bash loader to $(unexpand_path "$BAZ_LOADER") ... " printf
        baz_loader "$BAZ_BASH_LOADER_TEMPLATE" >"$BAZ_LOADER"
        eecho 'done'
    else
        log "unable to use any loaders"
    fi

    eecho
    if [ "$_baz_upgrade" ]; then
        log "upgraded baz from v$BAZ_VERSION -> $_baz_new_ver"
    else
        log "done ! now just add this ( if it already isnt there ) to your ~/.bashrc :"
        eecho

        cat <<EOF
    export BAZ_LOADER_ENABLED=true
    _baz_loader="\$HOME/.local/share/baz/loader.sh"

    # shellcheck disable=SC1090
    [ ! -f "\$_baz_loader" ] || source "\$_baz_loader"
EOF
    fi
}

baz_unsetup() {
    log "removing baz v$BAZ_VERSION"

    log "removing baz data directory : $(unexpand_path "$BAZ_DIR") ... " printf
    rm -rf -- "$BAZ_DIR"
    eecho 'done'

    log "now just remove $0"
}

baz_install() {
    [ "$1" ] || error 'no method specified'
    [ "$2" ] || error 'no atom specified'

    log 'will install :'
    {
        for dir in "${@:2}"; do
            log "$dir"
        done
    } | indent
    eecho

    if [ "$BAZP_NO_ASKINST" != 'true' ]; then
        yn "are you sure ?" ||
            error 'aborting, canceled by the user'
    fi

    export BAZP_INSTALL_METHOD="$1"

    case "$1" in
    local) bazp_install_dirs "${@:2}" ;;
    git) bazp_install_gits "${@:2}" ;;
    *) error "method '$1' does not exist" ;;
    esac
}

baz_uninstall() {
    [ "$1" ] || error 'no plugins specified'

    log 'will uninstall :'
    _ex="${TMPDIR:?}/.baz_uninstall.ss"

    {
        set -e

        for plugin in "$@"; do
            check_plugin_state "$_ex"

            if [ ! -d "${BAZ_PLUGDIR:?}/${plugin:?}" ]; then
                : >"$_ex"
                error "plugin '$plugin' not installed"
            fi

            log "$plugin"
        done
    } | indent
    eecho

    [ -e "$_ex" ] && rm -f -- "$_ex" && exit 1

    if [ "$BAZP_NO_ASKINST" != 'true' ]; then
        yn 'are you sure ?' || error 'aborting : canceled by the user'
    fi

    for plugin in "$@"; do
        check_plugin_state

        log "uninstalling : $plugin ..."

        cd "${BAZ_PLUGDIR:?}/$plugin"
        . "$BAZP_INDEX"
        baz_run_hook 'pre-uninstall'
        bazp_reset_env

        cd "$BAZP_INITDIR"
        rm -rf -- "${BAZ_PLUGDIR:?}/$plugin"
    done
}

baz_list() {
    [ -d "${BAZ_PLUGDIR:?}" ] || error 'no plugin directory'
    [ -z "$(ls -A -- "${BAZ_PLUGDIR:?}")" ] && error 'no plugins installed'

    log 'installed plugins :'

    {
        while read -r dir; do
            _plugent="$(get_base "$dir")"
            [ -f "$dir/disabled" ] && _plugent+=' [DISABLED]'

            log "$_plugent"
        done <<<"$(find "${BAZ_PLUGDIR:?}" -maxdepth 1 -not -path "${BAZ_PLUGDIR:?}" -type d)"
    } | indent >&2
}

baz_update() {
    log 'updating plugins in paralel ... ' printf

    if [ "$1" ]; then
        eecho 'specified'

        for plugin in "$@"; do
            plugin="$(get_base "${plugin:?}")" check_plugin_state
            baz_update_plugin "${BAZ_PLUGDIR:?}/${plugin:?}" &
        done
    else
        [ -d "${BAZ_PLUGDIR:?}" ] || error 'no plugin directory'
        eecho 'all'

        for plugin in "${BAZ_PLUGDIR:?}"/*; do
            baz_update_plugin "${plugin:?}" &
        done
    fi

    log 'waiting for updates to finish'
    wait
    log 'updated !'
}

baz_info() {
    [ "$1" ] || error 'no plugin type specified'
    [ "$2" ] || error 'no atom specified'

    fn="describe_$1"
    command -v -- "$fn" >/dev/null ||
        error "Plugin type '$1' is not known"

    for plugin in "${@:2}"; do
        [ "$1" = 'git' ] || check_plugin_state

        $fn "$plugin"
        eecho
    done
}

baz_upgrade() {
    log 'upgrading baz'
    yn 'do you want to overwrite your config ?' && export BAZ_NEWCONF=true

    _baz_upgrade=true baz_setup
}

baz_disable() {
    [ "$1" ] || error 'no plugins specified'

    for plugin in "$@"; do
        check_plugin_state

        log "disabling plugin $plugin"
        : >"${BAZ_PLUGDIR:?}/${plugin:?}/disabled"
    done
}

baz_enable() {
    [ "$1" ] || error 'no plugins specified'

    for plugin in "$@"; do
        check_plugin_state

        log "enabling plugin $plugin"
        rm -f -- "${BAZ_PLUGDIR:?}/${plugin:?}/disabled"
    done
}

main() {
    use printf return

    [ "$_BAZ_NO_PRE" != true ] && [ -f "$BAZ_PRE" ] && . "$BAZ_PRE"

    if [ "$BAZ_NORLWRAP" != true ] && command -v rlwrap >/dev/null; then
        use trap rlwrap return

        _rlhist="$TMPDIR/.baz.$RANDOM"

        : >"$_rlhist"
        trap 'rm -f -- "$_rlhist"' 0 1 15

        _BAZ_NO_PRE=true BAZ_NORLWRAP=true rlwrap -g '.*' -H "$_rlhist" -- "$0" "$@"
        exit $?
    fi

    set -e

    use trap command find rm cp mkdir \
        read printf unset return \
        while echo git wait head

    if [ -f "$BAZ_CONF" ]; then
        . "$BAZ_CONF"
    else
        elog 'warning : no config found'
    fi

    if [ "$BAZ_LOADER_VERSION" ] && [ "$BAZ_LOADER_VERSION" != "$BAZ_VERSION" ]; then
        elog "baz loader version ( $BAZ_LOADER_VERSION ) does not match current version ( $BAZ_VERSION )"
    fi

    BAZP_NO_LOG=true bazp_reset_env

    case "${1//[[:space:]]/}" in
    help) baz_help 2>&1 ;;
    setup) baz_setup ;;
    unsetup) baz_unsetup ;;
    install) baz_install "$2" "${@:3}" ;;
    uninstall) baz_uninstall "${@:2}" ;;
    list) baz_list ;;
    update) baz_update "${@:2}" ;;
    info) baz_info "$2" "${@:3}" ;;
    upgrade) baz_upgrade ;;
    version) echo "v$BAZ_VERSION" ;;
    disable) baz_disable "${@:2}" ;;
    enable) baz_enable "${@:2}" ;;
    '')
        baz_help
        exit 1
        ;;
    *)
        elog "error : subcommand '$1' is not valid"
        baz_help 2>&1 | indent >&2
        exit 1
        ;;
    esac
}

[ "$BAZ_HEADER" ] || main "$@"
