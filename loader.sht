#!/usr/bin/env bash

# #{_} => preprocessor macro expansion

# before anything, im very sorry about these `local` things, bash
# is sometimes trash, this is one example of bash handling clearly
# local variables like globals

# all function names starting with _ will be mangled

export BAZ_LOADER_VERSION='#{BAZ_VER}'

#{BAZ_LOGGING_FN}

_baz_load_envs() {
    #{BAZ_LOG} "loading environment variables from '$BAZP_NAME'"

    local _baz_env="$1/environments" _env
    [ -d "$_baz_env" ] || return

    for _baz_env in "$_baz_env"/*; do
        #{BAZ_LOG} "loading env variable '$_baz_env'"

        # to avoid forking, im using read
        #{BAZ_RD} _env <"$_baz_env"

        # could we optimise these read calls without subshells ? ref ^
        # basically, can we turn this into a single call ?
        eval "#{BAZ_RD} _env<<#{BAZ_RDELIM}
$_env
#{BAZ_RDELIM}"

        export "${_baz_env##*/}"="$_env"
    done
}

_baz_load_commands() {
    #{BAZ_LOG} "adding '$BAZP_NAME' commands to PATH"

    local _cmd_dir="$1/commands"
    [ -d "$_cmd_dir" ] || return

    export PATH="$PATH:$_cmd_dir"

    #{BAZ_LOG} "making '$BAZP_NAME' commands executable"

    chmod -- 755 "$_cmd_dir"/*
}

_baz_load_functions() {
    #{BAZ_LOG} "loading functions from '$BAZP_NAME'"

    local _baz_func="$1/functions" _func
    [ -d "$_baz_func" ] || return

    for _baz_func in "$_baz_func"/*; do
        #{BAZ_LOG} "loading function '$_baz_func'"

        #{BAZ_RD} _func <"$_baz_func"

        eval "function ${_baz_func##*/}(){
            $_func
        }"
    done
}

_baz_load_aliases() {
    #{BAZ_LOG} "loading aliases from '$BAZP_NAME'"

    local _baz_alias="$1/aliases" _alias
    [ -d "$_baz_alias" ] || return

    for _baz_alias in "$_baz_alias"/*; do
        #{BAZ_LOG} "loading alias '$_baz_alias'"

        #{BAZ_RD} _alias <"$_baz_alias"

        # shellcheck disable=SC2139
        alias "${_baz_alias##*/}"="$_alias"
    done
}

_baz_load_runners() {
    #{BAZ_LOG} "running runners in '$BAZP_NAME'"

    local _baz_runner="$1/runners"
    [ -d "$_baz_runner" ] || return

    for _baz_runner in "$_baz_runner"/*; do
        #{BAZ_LOG} "starting runner: '$_baz_runner'"
        . "$_baz_runner"
    done
}

_baz_load_completions() {
    #{BAZ_LOG} "adding completions from '$BAZP_NAME'"

    local _baz_completion="$1/completions" _baz_completions_first_line
    [ -d "$_baz_completion" ] || return

    for _baz_completion in "$_baz_completion"/*; do
        #{BAZ_LOG} "adding completion: '$_baz_completion'"

        read -r _baz_completions_first_line <"$_baz_completion"

        complete -F "$_baz_completions_first_line" -o bashdefault -o default "${_baz_completion##*/}"
    done
}

_baz_load_keybinds() {
    #{BAZ_LOG} "loading readline keybinds from '$BAZP_NAME'"

    local _baz_bind="$1/keybinds"
    local _all_keybinds="$_baz_bind/all.rl" _baz_bind="$_baz_bind/bindings"

    if [ -f "$_all_keybinds" ]; then
        #{BAZ_LOG} 'loading full-context keybinds'
        bind -f "$_all_keybinds"
    fi

    [ -d "$_baz_bind" ] || return

    #{BAZ_LOG} 'loading contexed keybinds'

    for _baz_bind in "$_baz_bind"/*; do
        #{BAZ_LOG} "loading keybinds for context: $_baz_bind"
        bind -m "${_baz_bind##*/}" -f "$_baz_bind"
    done
}

baz_load_plugin_low() {
    . "$1/baz.env"
    local p="$1/$BAZP_SRC"

    # having everything inline helps with performance,
    # although reduces maintainablity

    # we could also inline the function calls, but i think its
    # too unmaintainable at that point

    _baz_load_envs "$p"
    _baz_load_commands "$p"
    _baz_load_functions "$p"
    _baz_load_aliases "$p"
    _baz_load_runners "$p"
    _baz_load_completions "$p"
    _baz_load_keybinds "$p"
}

# mid level all plugins loader
baz_loader() {
    local p=('#{BAZ_PLUG_DIR}'/*)

    #{BAZ_LOG} 'checking if #{BAZ_PLUG_DIR} exists and isnt empty'

    [ -d "${p[0]}" ] || return 1

    #{BAZ_LOG} 'loading baz from data dir: #{BAZ_DATA_DIR}'

    for p in "${p[@]}"; do
        [ -e "$p/disabled" ] || [ ! -f "$p/baz.env" ] && continue

        #{BAZ_LOG}
        baz_load_plugin_low "$p"
        #{BAZ_LOG}
    done

    #{BAZ_NOP}
}

[ "$BAZ_LOADER_ENABLED" ] && baz_loader
