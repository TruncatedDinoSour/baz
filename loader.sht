#!/usr/bin/env bash

# Before anything, I'm very sorry
# about these `local` things, bash
# is sometimes trash, this is one
# example of bash handling clearly
# local variables like globals

if [ "$BAZ_DEBUG_LOAD" ]; then
    __baz_vecho() { echo "[BAZ_LOAD] $1" >&2; }
    __baz_vecho "Generated by baz version '#{BAZ_VER}'"
else
    __baz_vecho() { :; }
fi

__baz_get_base() { echo "${1##*/}"; }
__baz_sanitize() {
    read -r x
    local tmp="${x//[[:space:]\"\'~!#\\$%^&*\/()=]/}"
    printf '%s' "${tmp//../}"
}

__expand_var() {
    # This code is extremely painful
    # because I'm trying to reduce the ammount
    # of colisions

    local _______baz_expand_var_delimiter_______='_______#{RHASH}_baz_expand_var_#{RHASH}_______'

    local _______baz_expand_var_cmd_______
    _______baz_expand_var_cmd_______="cat <<$_______baz_expand_var_delimiter_______"$'\n'"$(<"$1")"$'\n'"$_______baz_expand_var_delimiter_______"

    eval "$_______baz_expand_var_cmd_______"
}

__baz_load_envs() {
    local _envs_dir="$plugin/$BAZP_SRC/environments"

    [ -d "$_envs_dir" ] || return

    local _baz_env
    for _baz_env in "$_envs_dir"/*; do
        [ -f "$_baz_env" ] || continue

        local _env_name
        _env_name="$(__baz_get_base "$_baz_env" | __baz_sanitize)"

        [ "$_env_name" ] || continue

        __baz_vecho "Loading env variable '$_env_name'"

        export "$_env_name"="$(__expand_var "$_baz_env")"
    done
}

__baz_load_commands() {
    local _cmd_dir="$plugin/$BAZP_SRC/commands"

    [ -d "$_cmd_dir" ] || return
    export PATH="$PATH:$_cmd_dir"

    local _cmd_file
    for _cmd_file in "$_cmd_dir"/*; do
        [ -f "$_cmd_file" ] || continue

        if [ ! -x "$_cmd_file" ]; then
            __baz_vecho "Making '$_cmd_file' executable"
            chmod a+rx -- "$_cmd_file"
        fi
    done
}

__baz_load_functions() {
    _func_dir="$plugin/$BAZP_SRC/functions"
    [ -d "$_func_dir" ] || return

    local _baz_func
    for _baz_func in "$_func_dir"/*; do
        [ -f "$_baz_func" ] || continue

        local _func_name
        _func_name="$(__baz_get_base "$_baz_func" | __baz_sanitize)"
        [ "$_func_name" ] || continue

        __baz_vecho "Loading function '$_func_name'"
        eval "function $_func_name() {
                      $(<"$_baz_func")
                  }"
    done
}

__baz_load_aliases() {
    local _alias_dir="$plugin/$BAZP_SRC/aliases"
    [ -d "$_alias_dir" ] || return

    local _baz_alias
    for _baz_alias in "$_alias_dir"/*; do
        [ -f "$_baz_alias" ] || continue

        local _alias_name
        _alias_name="$(__baz_get_base "$_baz_alias" | __baz_sanitize)"
        [ "$_alias_name" ] || continue

        __baz_vecho "Loading alias '$_alias_name'"

        # shellcheck disable=SC2139
        alias "$_alias_name"="$(<"$_baz_alias")"
    done
}

__baz_load_runners() {
    local _runners_dir="$plugin/$BAZP_SRC/runners"
    [ -d "$_runners_dir" ] || return

    local _baz_runner
    for _baz_runner in "$_runners_dir"/*; do
        [ -f "$_baz_runner" ] || continue
        __baz_vecho "Starting runner: $(__baz_get_base "$_baz_runner")"
        source "$_baz_runner"
    done
}

__baz_load_completions() {
    local _completions_dir="$plugin/$BAZP_SRC/completions"
    [ -d "$_completions_dir" ] || return

    local _baz_completion
    for _baz_completion in "$_completions_dir"/*; do
        [ -f "$_baz_completion" ] || continue
        __baz_vecho "Adding completion: $([ "$BAZ_DEBUG_LOAD" ] && __baz_get_base "$_baz_runner")"

        complete -F "$(head -n 1 -- "$_baz_completion")" \
            -o bashdefault -o default "$(__baz_get_base "$_baz_completion")"
    done
}

__baz_load_keybinds() {
    local _keybinds_dir="$plugin/$BAZP_SRC/keybinds"
    local _all_keybinds="$_keybinds_dir/all.rl"
    local _bindings_dir="$_keybinds_dir/bindings"

    if [ -f "$_all_keybinds" ]; then
        __baz_vecho "Loading full-context keybinds"
        bind -f "$_all_keybinds"
    fi

    [ -d "$_bindings_dir" ] || return
    __baz_vecho "Loading contexed keybinds"

    local _baz_bind
    for _baz_bind in "$_bindings_dir"/*; do
        local _baz_bind_ctx
        _baz_bind_ctx="$(__baz_get_base "$_baz_bind")"

        __baz_vecho "Loading keybinds for context: $_baz_bind_ctx"
        bind -m "$_baz_bind_ctx" -f "$_baz_bind"
    done
}

__baz_loader() {
    local __baz_stages=(
        __baz_load_envs
        __baz_load_commands
        __baz_load_functions
        __baz_load_aliases
        __baz_load_runners
        __baz_load_completions
        __baz_load_keybinds
    )

    export BAZ_LOADER_VERSION='#{BAZ_VER}'

    if [ -z "$(ls -A -- '#{BAZ_PLUG_DIR}' 2>/dev/null)" ] || [ ! -d '#{BAZ_PLUG_DIR}' ]; then
        __baz_vecho 'No plugin dir found'
        return 1
    fi

    __baz_vecho 'Loading baz from data dir: #{BAZ_DATA_DIR_SHORT}'

    local plugin
    for plugin in '#{BAZ_PLUG_DIR}'/*; do
        [ -e "$plugin/disabled" ] && continue

        __baz_vecho

        . "$plugin/baz.env"

        local stage
        for stage in "${__baz_stages[@]}"; do
            __baz_vecho "Loading stage: $stage($BAZP_NAME)"
            "$stage"
        done

        __baz_vecho
    done
}

[ "$BAZ_LOADER_ENABLED" ] && __baz_loader
