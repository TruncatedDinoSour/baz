#!/usr/bin/env bash

# #{_} => Preprocessor macro expansion

# Before anything, I'm very sorry
# about these `local` things, bash
# is sometimes trash, this is one
# example of bash handling clearly
# local variables like globals

# All function names starting with _ will be mangled

# Seperating the $'\n' into a var seems to boost performance
# by a bit    ->     ->    ->    ->    vvvvvvvvvvvv
export BAZ_LOADER_VERSION='#{BAZ_VER}' BAZ_NL=$'\n'

#{BAZ_LOGGING_FN}

_baz_load_envs() {
    #{BAZ_LOG} "Loading environment variables from '$BAZP_NAME'"

    local _envs_dir="$1/environments" _baz_env _env
    [ -d "$_envs_dir" ] || return

    for _baz_env in "$_envs_dir"/*; do
        #{BAZ_LOG} "Loading env variable '$_baz_env'"

        # To avoid forking, I'm using read
        #{BAZ_RD} _env <"$_baz_env"

        # Could we optimise these read calls without subshells? Ref ^
        # Basically, can we turn this into a single call ?
        eval "#{BAZ_RD} _env<<#{BAZ_RDELIM}$BAZ_NL$_env$BAZ_NL"'#{BAZ_RDELIM}'

        export "${_baz_env##*/}"="$_env"
    done
}

_baz_load_commands() {
    #{BAZ_LOG} "Adding '$BAZP_NAME' commands to PATH"

    local _cmd_dir="$1/commands"
    [ -d "$_cmd_dir" ] || return

    export PATH="$PATH:$_cmd_dir"

    #{BAZ_LOG} "Making '$BAZP_NAME' commands executable"

    chmod -- 755 "$_cmd_dir"/*
}

_baz_load_functions() {
    #{BAZ_LOG} "Loading functions from '$BAZP_NAME'"

    local _func_dir="$1/functions" _func
    [ -d "$_func_dir" ] || return

    for _baz_func in "$_func_dir"/*; do
        #{BAZ_LOG} "Loading function '$_baz_func'"

        #{BAZ_RD} _func <"$_baz_func"

        eval "function ${_baz_func##*/}(){
            $_func
        }"
    done
}

_baz_load_aliases() {
    #{BAZ_LOG} "Loading aliases from '$BAZP_NAME'"

    local _alias_dir="$1/aliases" _baz_alias _alias
    [ -d "$_alias_dir" ] || return

    for _baz_alias in "$_alias_dir"/*; do
        #{BAZ_LOG} "Loading alias '$_baz_alias'"

        #{BAZ_RD} _alias <"$_baz_alias"

        # shellcheck disable=SC2139
        alias "${_baz_alias##*/}"="$_alias"
    done
}

_baz_load_runners() {
    #{BAZ_LOG} "Running runners in '$BAZP_NAME'"

    local _runners_dir="$1/runners" _baz_runner
    [ -d "$_runners_dir" ] || return

    for _baz_runner in "$_runners_dir"/*; do
        #{BAZ_LOG} "Starting runner: '$_baz_runner'"
        . "$_baz_runner"
    done
}

_baz_load_completions() {
    #{BAZ_LOG} "Adding completions from '$BAZP_NAME'"

    local _completions_dir="$1/completions" _baz_completion _baz_completions_first_line
    [ -d "$_completions_dir" ] || return

    for _baz_completion in "$_completions_dir"/*; do
        #{BAZ_LOG} "Adding completion: '$_baz_completion'"

        read -r _baz_completions_first_line <"$_baz_completion"

        complete -F "$_baz_completions_first_line" \
            -o bashdefault -o default "${_baz_completion##*/}"
    done
}

_baz_load_keybinds() {
    #{BAZ_LOG} "Loading readline keybinds from '$BAZP_NAME'"

    local _keybinds_dir="$1/keybinds" _baz_bind
    local _all_keybinds="$_keybinds_dir/all.rl" _bindings_dir="$_keybinds_dir/bindings"

    if [ -f "$_all_keybinds" ]; then
        #{BAZ_LOG} "Loading full-context keybinds"
        bind -f "$_all_keybinds"
    fi

    [ -d "$_bindings_dir" ] || return

    #{BAZ_LOG} "Loading contexed keybinds"

    for _baz_bind in "$_bindings_dir"/*; do
        #{BAZ_LOG} "Loading keybinds for context: $_baz_bind"
        bind -m "${_baz_bind##*/}" -f "$_baz_bind"
    done
}

baz_load_plugin_low() {
    . "$1/baz.env"
    local p="$1/$BAZP_SRC"

    # Having everything inline helps with performance,
    # although reduces maintainablity

    # We could also inline the function calls, but I think it's
    # too unmaintainable at that point

    _baz_load_envs "$p"
    _baz_load_commands "$p"
    _baz_load_functions "$p"
    _baz_load_aliases "$p"
    _baz_load_runners "$p"
    _baz_load_completions "$p"
    _baz_load_keybinds "$p"
}

# Mid level all plugins loader
baz_loader() {
    if [ ! -d '#{BAZ_PLUG_DIR}' ] || [ -z "$(ls -- '#{BAZ_PLUG_DIR}' 2>/dev/null)" ]; then
        #{BAZ_LOG} 'No plugin dir found'
        return 1
    fi

    #{BAZ_LOG} 'Loading baz from data dir: #{BAZ_DATA_DIR}'

    local plugin
    for plugin in '#{BAZ_PLUG_DIR}'/*; do
        if [ -e "$plugin/disabled" ] || [ ! -f "$plugin/baz.env" ]; then
            continue
        fi

        #{BAZ_LOG}
        baz_load_plugin_low "$plugin"
        #{BAZ_LOG}
    done

    #{BAZ_NOP}
}

[ "$BAZ_LOADER_ENABLED" ] && baz_loader
