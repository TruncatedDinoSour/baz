#!/usr/bin/env bash

# Before anything, I'm very sorry
# about these `local` things, bash
# is sometimes trash, this is one
# example of bash handling clearly
# local variables like globals

# All names starting with _ will be mangled

# Seperating the $'\n' into a var seems to boost performance
# by a bit            ->               vvvvvvvvvvvv
export BAZ_LOADER_VERSION='#{BAZ_VER}' BAZ_NL=$'\n'

#{BAZ_LOADER_FN}

_baz_get_base() {
    local -n _r="$1"
    shift 1

    set -- "${1%"${1##*[!/]}"}"
    printf -v _r %s "${1##*/}"
}

_baz_load_envs() {
    #{BAZ_LOG} "Loading environment variables from '$BAZP_NAME'"

    local _envs_dir="$1/environments" _baz_env _env_name _env
    [ -d "$_envs_dir" ] || return

    for _baz_env in "$_envs_dir"/*; do
        [ -f "$_baz_env" ] || continue

        _baz_get_base _env_name "$_baz_env"

        #{BAZ_LOG} "Loading env variable '$_env_name'"

        # To avoid forking, I'm using mapfile
        mapfile -d '' _env <"$_baz_env"
        export "$_env_name"="$(eval '#{BAZ_CAT}<<#{BAZ_RDELIM}'"$BAZ_NL${_env[*]}$BAZ_NL"'#{BAZ_RDELIM}')"
        #                    ^^~~~~ We need to get rid of fork this, or at least reduce it... somehow   ^
    done
}

_baz_load_commands() {
    #{BAZ_LOG} "Adding '$BAZP_NAME' commands to PATH"

    local _cmd_dir="$1/commands" _cmd_file
    [ -d "$_cmd_dir" ] || return

    export PATH="$PATH:$_cmd_dir"

    for _cmd_file in "$_cmd_dir"/*; do
        [ -f "$_cmd_file" ] || continue
        #{BAZ_LOG} "Loading command: $_cmd_file"

        if [ ! -x "$_cmd_file" ]; then
            #{BAZ_LOG} "Making '$_cmd_file' executable"
            chmod 755 -- "$_cmd_file"
        fi
    done
}

_baz_load_functions() {
    #{BAZ_LOG} "Loading functions from '$BAZP_NAME'"

    local _func_dir="$1/functions" _baz_func _func_name _func
    [ -d "$_func_dir" ] || return

    for _baz_func in "$_func_dir"/*; do
        [ -f "$_baz_func" ] || continue

        _baz_get_base _func_name "$_baz_func"

        #{BAZ_LOG} "Loading function '$_func_name'"

        mapfile -d "$BAZ_NL" _func <"$_baz_func"

        eval "function $_func_name(){
            ${_func[*]}
        }"
    done
}

_baz_load_aliases() {
    #{BAZ_LOG} "Loading aliases from '$BAZP_NAME'"

    local _alias_dir="$1/aliases" _baz_alias _alias_name _alias
    [ -d "$_alias_dir" ] || return

    for _baz_alias in "$_alias_dir"/*; do
        [ -f "$_baz_alias" ] || continue

        _baz_get_base _alias_name "$_baz_alias"
        [ "$_alias_name" ] || continue

        #{BAZ_LOG} "Loading alias '$_alias_name'"

        mapfile -t _alias <"$_baz_alias"

        # shellcheck disable=SC2139
        alias "$_alias_name"="${_alias[*]}"
    done
}

_baz_load_runners() {
    #{BAZ_LOG} "Running runners in '$BAZP_NAME'"

    local _runners_dir="$1/runners" _baz_runner
    [ -d "$_runners_dir" ] || return

    for _baz_runner in "$_runners_dir"/*; do
        [ -f "$_baz_runner" ] || continue
        #{BAZ_LOG} "Starting runner: '$_baz_runner'"
        source "$_baz_runner"
    done
}

_baz_load_completions() {
    #{BAZ_LOG} "Adding completions from '$BAZP_NAME'"

    local _completions_dir="$1/completions" _baz_completion _baz_completions_first_line
    [ -d "$_completions_dir" ] || return

    for _baz_completion in "$_completions_dir"/*; do
        [ -f "$_baz_completion" ] || continue
        #{BAZ_LOG} "Adding completion: '$_baz_runner'"

        read -r _baz_completions_first_line <"$_baz_completion"

        _baz_get_base _baz_completion
        complete -F "$_baz_completions_first_line" \
            -o bashdefault -o default "$_baz_completion"
    done
}

_baz_load_keybinds() {
    #{BAZ_LOG} "Loading readline keybinds from '$BAZP_NAME'"

    local _keybinds_dir="$1/keybinds" _baz_bind _baz_bind_ctx
    local _all_keybinds="$_keybinds_dir/all.rl"
    local _bindings_dir="$_keybinds_dir/bindings"

    if [ -f "$_all_keybinds" ]; then
        #{BAZ_LOG} "Loading full-context keybinds"
        bind -f "$_all_keybinds"
    fi

    [ -d "$_bindings_dir" ] || return

    #{BAZ_LOG} "Loading contexed keybinds"

    for _baz_bind in "$_bindings_dir"/*; do
        _baz_get_base _baz_bind_ctx "$_baz_bind"

        #{BAZ_LOG} "Loading keybinds for context: $_baz_bind_ctx"
        bind -m "$_baz_bind_ctx" -f "$_baz_bind"
    done
}

# Low level plugin loading
_baz_load_plugin() {
    . "$1/baz.env"

    local p="$1/$BAZP_SRC"

    # Having everything inline helps with performance,
    # although reduces maintainablity

    _baz_load_envs "$p"
    _baz_load_commands "$p"
    _baz_load_functions "$p"
    _baz_load_aliases "$p"
    _baz_load_runners "$p"
    _baz_load_completions "$p"
    _baz_load_keybinds "$p"
}

# High level helpers
baz_plugdir_empty() { [ ! -d '#{BAZ_PLUG_DIR}' ] || [ -z "$(ls -A -- '#{BAZ_PLUG_DIR}' 2>/dev/null)" ]; }
baz_log() { echo " * $1"; }

# High level plugin loading
baz_load_plugin() {
    if baz_plugdir_empty; then
        baz_log 'No plugin dir found'
        return 1
    fi

    [ ! "$1" ] && baz_log 'No plugin specified' 2>&1 && return 1

    local baz_plugin="$1" baz_plugin_name
    [ -d "$1" ] || baz_plugin="#{BAZ_PLUG_DIR}/$1"
    _baz_get_base baz_plugin_name "$baz_plugin"

    [ "$BAZ_NO_DISABLED" ] &&
        [ -e "$baz_plugin/disabled" ] &&
        baz_log "'$baz_plugin_name' is disabled -- skipping" &&
        return

    if [ ! -f "$baz_plugin/baz.env" ]; then
        baz_log "Plugin '$baz_plugin_name' is invalid or is not installed" >&2
        return 2
    fi

    local start
    start="$(date +%s%N)"

    _baz_load_plugin "$baz_plugin"

    baz_log "Loading '$baz_plugin_name' took: ~$(($(("$(date +%s%N)" - start)) / 1000000)) ms" >&2
}

# High level multiple plugins loading
baz_load_plugins() {
    if [ "$#" -le 0 ]; then
        baz_log 'No plugins to load specified' >&2
        return 1
    fi

    local plugin ret=0

    for plugin in "$@"; do
        baz_load_plugin "$plugin" || ret="$((ret + 1))"
    done

    return "$ret"
}

# High level multiple all plugins loading
baz_load_all() {
    local start ret
    start="$(date +%s%N)"

    baz_load_plugins '#{BAZ_PLUG_DIR}'/*
    ret="$?"

    baz_log "Loading all plugins took: ~$(($(("$(date +%s%N)" - start)) / 1000000)) ms" >&2

    return "$ret"
}

# Mid level all plugins loader
baz_loader() {
    if baz_plugdir_empty; then
        #{BAZ_LOG} 'No plugin dir found'
        return 1
    fi

    #{BAZ_LOG} 'Loading baz from data dir: #{BAZ_DATA_DIR_SHORT}'

    local plugin
    for plugin in '#{BAZ_PLUG_DIR}'/*; do
        if [ -e "$plugin/disabled" ] || [ ! -f "$plugin/baz.env" ]; then
            continue
        fi

        #{BAZ_LOG}
        _baz_load_plugin "$plugin"
        #{BAZ_LOG}
    done
}

[ "$BAZ_LOADER_ENABLED" ] && baz_loader
